min = min(air_time, na.rm = TRUE),             # 최솟값
max = max(air_time, na.rm = TRUE),             # 최댓값
n = n())                                       # 값의 개수
flights %>% summarise(mean = mean(air_time),           # 평균
std_dev = sd(air_time),          # 표준편차
min = min(air_time),             # 최솟값
max = max(air_time),             # 최댓값
n = n())
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights %>% relocate(air_time, distance)
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights %>% relocate(air_time, distance)
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights
flights %>% relocate(air_time, distance)
flights %>% relocate(air_time, distance)                    # air_time과 distance를 맨 앞쪽 열로 이동
flights %>% relocate(carrier:tailnum, .before = day)        # carrier ~ tailnum을 day변수 앞으로 이동
# group_by() 함수 : 특정 변수를 기준으로 그룹화
# 일반적으로 summarise()와 함께 사용
# 여러 변수를 기준으로 그룹화 가능
# summarize() 함수에서 매개변수 .groups
# "drop" : 모든 그룹의 수준을 푼다
# "keep" : 같은 그룹화 구조가 유지된다
# "drop_last" : 메세지를 없앤다
# ungroup() 함수 : 그룹화 제거
flights %>% group_by(month)
flights %>% group_by(month) %>%                       # 월별 평균 출발 지연 시간, 그룹 크기
summarise(delay = mean(dep_delay, na.rm = TRUE), n = n())
# 월별로 그룹을 나누고, 각 그룹의 평균 출발 지연시간과 그룹 크기를 계산
flights %>% group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE), n = n())
# group_by() 함수 : 특정 변수를 기준으로 그룹화
# 그룹별 통계량을 계산할 때 주로 사용
# 일반적으로 summarise()와 함께 사용
# 여러 변수를 기준으로 그룹화 가능
# summarize() 함수에서 매개변수 .groups
# "drop" : 모든 그룹의 수준을 푼다
# "keep" : 같은 그룹화 구조가 유지된다
# "drop_last" : 메세지를 없앤다
# ungroup() 함수 : 그룹화 제거
flights %>% group_by(month)           # group_by()만 적용하면 월별로 그룹을 나누었다는 사실만 알 수 있고, 별다른 변화는 없음
flights %>% group_by(year, month, day) %>% summarise(n = n())
flights %>% group_by(month) %>% ungroup() %>% summarise(n = n())     # 그룹화 제거
# [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수
library(tidyr)
table1
table2
table3
table4a
table4b
# wide format -> long format
# pivot_longer() 함수 사용
pivot_longer(colc = c(`1999`, `2000`))
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(colc = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# 하나의 행에 하나의 관측 대상 -> wide form
table4a # 반복이 열(변수) 이름으로 들어가면 wide format
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases") %>%
mutate(year = parse_integer(year))
# [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수
library(tidyverse)
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases") %>%
mutate(year = parse_integer(year))
table4b %>%
pivot_longer(cols = -country,
names_to = "year",
values_to = "population") %>%
mutate(year = parse_integer(year))
# [예제2]
relig_income
# [예제2]
relig_income %>% glimpse()
relig_income
relig_income %>%
pivot_longer(cols = -religion,
names_to = "income",
values_to = "count")
relig_income %>%
pivot_longer(cols = -religion,
names_to = "income",
values_to = "count") %>%
view()
# [예제3]
bilboard %>% glimpse()
# [예제3]
billboard %>% glimpse()
billboard
bilboard %>%
pivot_longer(cols = select(starts_with(wk)),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard %>%
pivot_longer(cols = select(starts_with(wk)),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard %>%
pivot_longer(cols = starts_with(wk),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard
billboard %>%
pivot_longer(cols = starts_with("wk"),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE)            # value에서 결측값을 모두 버림
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk"
values_to = "rank",
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE)            # value에서 결측값을 모두 버림
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",               # week 열의 값에서 wk를 제거
values_to = "rank",
values_drop_na = TRUE) %>%         # value에서 결측값을 모두 버림
mutate(week = parse_integer(year))
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",               # week 열의 값에서 wk를 제거
values_to = "rank",
values_drop_na = TRUE) %>%         # value에서 결측값을 모두 버림
mutate(week = parse_integer(week))
# long format -> wide format =====================================
table1
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year, # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population))
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year,                  # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population)) %>%
relocate(country, ends_with("1999"))
table2
table1
table2 %>%
pivot_wider(names_from = type,
values_from = count)
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year,                  # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population)) %>%
relocate(country, ends_with("1999"))
table1
table2 %>%
pivot_wider(names_from = type,
values_from = count)
table2
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / populayion * 100000)
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000)
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate))
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로?
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로
table2 %>%
pivot_wider(names_from = type,                        # type을 wide로
values_from = count) %>%
mutate(rate = cases / population * 100000)
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                        # type을 wide로
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%        # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로
# [예제]
fish_encounters
fish_encounters %>%
pivot_wider(names_from = station,
values_from = seen,
values_fill = 0)
# seperate 함수
# 여러개의 변수가 하나의 열에 저장되어 있을 때, 이를 분리
table3
# unite() 함수
# 여러개의 열을 하나의 열로 결합
table5
table %>%
unite(col = new_year, century, year)
table %>% unite(col = new_year, century, year)
table %>% unite(col = new_year, century, year)
table5 %>% unite(col = new_year, century, year)
# unite() 함수
# 여러개의 열을 하나의 열로 결합
table5
table5 %>% unite(col = new_year, century, year)
# seprate 함수
# 여러개의 변수가 하나의 열에 저장되어 있을 때, 이를 분리
table3
table3 %>%
separate(col = rate,
into = c("cases", "population"))
## 5.2.3 결측값 처리
# 결측값은 알려지지 않은 값을 표시. 결측값은 파급된다 = 결측값을 이용해 연산 시 결과는 결측값임을 뜻함.
# is.na() 함수 : 결측값 확인
NA > 5
10 == NA
NA + 10
NA / 2
NA == NA
is.na(NA)
# 명시적 결측값 : NA로 표시된 값
# 암묵적 결측값 : 단순히 데이터에 존재하지 않는 값
# povot_longer() 함수의 매개변수 values_drop_na 를 이용해 명시적 결측값을 암묵적 결측값으로 전환 가능
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c(`2015`, `2016`),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c(`2015`, `2016`),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
is.na(NA)
table3 %>%
separate(col = rate,
into = c("cases", "population"))
table3 %>%
separate(col = rate,
into = c("cases", "population"),
sep = "/")
# 명시적 결측값 : NA로 표시된 값
# 암묵적 결측값 : 데이터셋에 존재하지 않는 값
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
# [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수
library(tidyverse)
# 명시적 결측값 : NA로 표시된 값
# 암묵적 결측값 : 데이터셋에 존재하지 않는 값
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
stocks %>%
pivot_wider(names_from = year,                     # year를 열로 pivot하여 명시적으로 만듬
values_from = return)
stocks %>%
pivot_wider(names_from = year,                     # year를 열로 pivot하여 명시적으로 만듬
values_from = return) %>%
pivot_longer(cols = c(`2015`, `2016`),             # 명시적 결측값이 중요하지 않다면
names_to = "year",                    # 암묵적으로 만듬(NA 제거)
values_to = "return",
values_drop_na = TRUE)
# complete() 함수 : 입력한 열의 고유한 모든 조합을 찾은 후, 필요한 경우 명시적 결측값을 채움
# fill() 함수 : 결측값을 가장 최근에 존재하는 값(이월된 마지막 관측값)으로 대체
# drop_na() 함수 : 결측값이 존재하는 행 제거
# replace_na() 함수 : 결측값을 특정 값으로 대체
stocks
stocks %>% complete(year, qtr)
tibble(person = c("Derrick Whitmore", NA, NA, "Katherine Burke"),
treatment = c(1, 2, 3, 1), response = c(7, 10, 9, 4))
# Example for fill()
tibble(person = c("Derrick Whitmore", NA, NA, "Katherine Burke"),
treatment = c(1, 2, 3, 1), response = c(7, 10, 9, 4)) %>%
fill(person)
fillTibble %>%
fill(person)
# Example for fill()
fillTibble <- tibble(person = c("Derrick Whitmore", NA, NA, "Katherine Burke"),
treatment = c(1, 2, 3, 1), response = c(7, 10, 9, 4))
fillTibble %>%
fill(person)
fillTibble
fillTibble %>%
fill(person)
# Example for drop_na()
mytbl <- tibble(x = c(1, 2, NA), y = c("a", NA, "b"))
mytb
mytb1
# Example for drop_na()
mytbl <- tibble(x = c(1, 2, NA), y = c("a", NA, "b"))
mytb1
mytbl
mytbl %>% drop_na(x)                                # x 변수에서 결측값이 있는 행 제거
mytbl %>% drop_na()                                 # 모든 변수에 대해 결측값이 있는 행 제거
### 5.3 stringr 패키지
library(tidyverse)
library(stringr)
str %>% str_length()
# 5.3.2.1 str_length() 함수
str1 <- c("a", "R for data science", NA)
str %>% str_length()
str1 %>% str_length()
# [예쩨 2]
library(babynames)
# [예쩨 2]
library(babynames)
# [예제 2]
install.packages("babynames")
library(babynames)
# Example for replace_na()
mytbl
mytbl %>% replace_na(list(x = 0, y = "unkown"))
# 벡터에 있는 결측값을 대체하는 경우, 매개변수를 단일값으로 입력
mytbl$x
# 벡터에 있는 결측값을 대체하는 경우, 매개변수를 단일값으로 입력
mytbl$x %>% replace_na(0)
mytbl$y %>% replace_na("unknown")
mytbl %>% mutate(x = replace_na(x, 0), y = replace_na(y, "unknown"))
babynames
babynames %>%
count(length = str_length(name), wt = n)
# dplyr::count() 함수 - 그룹별 빈도 값 산출
#        매개변수 wt - 기본값은 NULL로 각 그룹의 행 개수 계산,
#                      변수를 입력하면 각 그룹에 대한 합계 계산
babynames
babynames %>%
count(length = str_length(name), wt = n)  # 이름 길이의 분포
babynames %>%
filter(str_length(name) == 15)
babynames %>%
filter(str_length(name) == 15) %>%
count(name, wt = n, sort = TRUE)
str_sub(x, 1, 3)
## 5.3.2.2 str_sub() 함수
# 문자열에서 특정 위치의 문자 추출
# 매개변수 start, end도 포함되기 때문에 반환되는 문자열의 길이는 end-start+1
# [예제 1]
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
str_sub(x, -3, -1)
str_sub("a", 1, 5)
# [예제 2]
babynames %>%
mutate(first = str_sub(name, 1, 1),
last = str_sub(name, -1, -1))
## 5.3.2.3 str_to_lower(), str_to_upper() 함수
# 대소문자 변환
str_to_lower(c("Apple", "Banana", "Pear"))
str_to_upper(c("Apple", "Banana", "Pear"))
## 5.3.3.1 str_c() 함수
# 두 개 이상의 벡터에 대해 원소별로 결합하여 단일 문자형 벡터로 만듬
### 5.3.3 데이터에서 문자열 생성
## 5.3.3.1 str_c() 함수
# 두 개 이상의 벡터에 대해 원소별로 결합하여 단일 문자형 벡터로 만듬
str_c("Letter: ", letters)
### 5.3.3 데이터에서 문자열 생성
## 5.3.3.1 str_c() 함수
# 두 개 이상의 벡터에 대해 원소별로 결합하여 단일 문자형 벡터로 만듬
letters
str_c("Letter: ", letters)
str_c("Letter", letters, sep = ": ")
str_c(letters, " is for", "...")
str_c(letters[-26], "comes before ", letters[-1])
letters[-26]
letters[-1]
str_c(letters[-26], " comes before ", letters[-1])
str_c(letters, collapse = "")
str_c(letters, collapse = " ")
str_c(c("a", NA, "b"), "-d")
str_c(c("a", NA, "b"), "-d")                            # 결측값(NA)이 있는 경우, 결합 결과는 결측값(NA)
# dplyr::mutate()와 함께 사용
info <- tibble(name = c("Kim", "Lee", "Park"))
info
info %>% mutate(greeting = str_c("Hi, ", name, "!"))
info %>% mutate(greeting = str_glue("Hi, {name}!"))
## 5.3.3.2 str_glue() 함수
# 고정 문자열과 변수 문자열을 결합할 때 ""를 반복적으로 타이핑하는 것을 방지하여 가독성을 높임
# {}안에 작성된 코드는 문자열 외부에 있는 것처럼 실행
info
info %>% mutate(greeting = str_glue("Hi, {name}!"))
## 5.3.3.3 str_flatten() 함수
# 벡터의 각 요소를 하나의 문자열로 결합
str_flatten(c("x", "y", "z"))
str_flatten(c("x", "y", "z"), collapse = ", ")
str_flatten(c("x", "y", "z"), collapse = ", ", last = ", and ")
mytbl <- tibble(name = c("Carmen", "Carmen", "Marvin", "Terence", "Terence", "Terence"),
fruit = c("banana", "apple", "nectarine", "cantaloupe", "papaya", "madarine"))
mytbl
mytbl %>%
group_by(name) %>%
summarise(fruits = str_flatten(fruit, ", "))
x <- c("apple", "banana", "pear")
# matching exact strings
str_view(x, "an")
# matching any character(except a newline)
str_view(x, ".a.")
# matching the start/end of the string
str_view(x, "^a")
str_view(x, "a$")
# only matching a complete string
str_view(c("apple pie", "apple", "apple cake"), "aple")
# only matching a complete string
str_view(c("apple pie", "apple", "apple cake"), "apple")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
str_view(x, "CC+")
str_view(x, "CC*")
str_view(x, "C?")
str_view(x, "C+")
str_view(x, "C*")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
str_view(x, "CC+")
str_view(x, "CC*")
str_view_all(names, "[aeiou]")
names <- c("Hadley", "Mine", "Garrett")
str_view_all(names, "[aeiou]")
str_view_all(names, "[^aeiou]")
str_view_all(names, "[^aeiou]+")
str_view(x, "[abcd]")
# []을 사용하여 문자 집합을 매칭
# [abcd] : "a", "b", "c", "d" 중 하나 이상과 매칭
# [^abcd] : "a", "b", "c", "d"를 제외한 어느 것과도 매칭
x <- c("apple", "banana", "pear")
str_view(x, "[abcd]")
str_view(c("a\\b"), "\\\\")
str_view(c("abc", "a.c", "bef"), "a\\.c")
str_view_all(names, "[^aeiou]+")
str_view(c("abc", "a.c", "bef"), "\\.")
a
str_view(c("abc", "a.c", "bef"), "a\\.c")
str_view(c("abc", "a.c", "bef"), "\\.")
str_view(c("abc", "a.c", "bef"), "a\\.c")
str_view(c("a\\b"), "\\\\")
str_view(c("a\b"), "\\\\")
str_view(c("a\b"), "\\")
str_view(c("a\\b"), "\\")
str_view(c("a\\b"), "\\\\")
str_view(c("a'c"), "\'")
str_view(c("a"c"), "\"")
str_view(c("a\"c"), "\"")
str_view(c('a"c'), '\"') # method 2
str_view(c("a\\b"), "\\") # 역슬래시는 기호로 사용하기 위해
str_view(c("a\\b"), "\\\\") # 역슬래시는 기호로 사용하기 위해 두번 써줘야 함
