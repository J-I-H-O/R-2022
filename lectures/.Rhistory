## 1.2.4 산술연산 함수
# log() : 로그함수
# sqrt() : 제곱근
# abs() : 절대값
# factorial() : 팩토리얼(계승)
# sin(), cos(), tan() : 삼각함수
log(10)
sqrt(16)
abs(-7)
factorial(3)
sin(pi/2)
numStr <- "2.2"
print(numStr)
numStr <- as.numeric(numStr)
print(numStr)
library(tinyverse)
library(tidyverse)
library(nycflights13)
glimpse(flights)
flights %>% glimpse()
## 5.1.2 행 관련 함수
# filter() 함수 : 조건에 맞는 행 추출
# %in% 연산자 : 왼쪽의 값이 오른쪽에 있는 값들 중 어느 하나와 같으면 TRUE
flights %>% filter(arr_delay >= 120)
flights %>% filter(month == 1 & day == 1)
flights %>% filter(month %in% c(3,5,8))
filter(flights, arr_dely >= 120)
filter(flights, arr_delay >= 120)
# arrange() 함수 : 특정 변수를 기준으로 행 정렬, 기본값은 오름차순
# 정렬 기준 변수가 여러 개인 경우 순차적으로 적용
# desc() 함수 : 내림차순 정렬
flights %>% arrange(year, month, daay, dep_time)
# arrange() 함수 : 특정 변수를 기준으로 행 정렬, 기본값은 오름차순
# 정렬 기준 변수가 여러 개인 경우 순차적으로 적용
# desc() 함수 : 내림차순 정렬
flights %>% arrange(year, month, day, dep_time)
flights %>% arrange(desc(dep_delay))
flights %>%
filter(dep_delay <= 10 & dep_delay >= -10) %>%
arrange(desc(arr_delay))
# select() 함수 : 특정 변수 추출
# 추출한 변수 명을 바꿀 수 있음
# 도우미(helpers) 함수
# starts_with() : 특정 문자열로 시작하는 이름 매칭
# ends_with() : 특정 문자열로 끝나는 이름 매칭
# contains() : 특정 문자열을 포함하는 이름 매칭
# num_range("x", 1:3) : x1, x2, x3 매칭
flights %>% select(year, month, day)
flights %>% select(year:day)
flights %>% select(-(year:day))
flights %>% select(dep_time = dep_time, arr_time = arr_time)
flights %>% select(starts_with("sched"))
flights %>% select(contains("arr"))
flights %>% reename(dep_time = dep_time, arr_time = arr_time) # 변수명 변경
flights %>% rename(dep_time = dep_time, arr_time = arr_time) # 변수명 변경
# rename() 함수 : 특정 column명 변경(select로도 가능)
# 명시적으로 언급하지 않은 모든 변수를 유지함
flights %>% select(dep_time = dep_time, arr_time = arr_time)  # 변수명 변경하여 추출
flights %>% rename(dep_time = dep_time, arr_time = arr_time)  # 변수명 변경하여 전체 출력
## 5.1.4 그룹 관련 함수
# summarie() 함수 : 통계량을 계산하여 하나의 행으로 요약
# 여러개의 다양한 요약 함수 사용 가능
# n() 함수 : 그룹별 크기 계싼
summary(flights)
# mutate() 함수 : 데이터셋에 존재하는 변수(column)로부터 새로운 변수 생성
# 새로운 변수는 항상 데이터셋 마지막 열에 추가됨
# 매개변수 .before : 새로운 변수를 특정 위치의 앞에 추가
# 매개변수 .after : 새로운 변수를 특정 위치의 뒤에 추가
flights %>% mutate(gain = dep_delay - arr_delay)
# mutate() 함수 : 데이터셋에 존재하는 변수(column)로부터 새로운 변수 생성
# 새로운 변수는 항상 데이터셋 마지막 열에 추가됨
# 매개변수 .before : 새로운 변수를 특정 위치의 앞에 추가
# 매개변수 .after : 새로운 변수를 특정 위치의 뒤에 추가
flights %>% mutate(gain = dep_delay - arr_delay)
# mutate() 함수 : 데이터셋에 존재하는 변수(column)로부터 새로운 변수 생성
# 새로운 변수는 항상 데이터셋 마지막 열에 추가됨
# 매개변수 .before : 새로운 변수를 특정 위치의 앞에 추가
# 매개변수 .after : 새로운 변수를 특정 위치의 뒤에 추가
flights %>% mutate(gain = dep_delay - arr_delay)
flights %>% mutate(speed = distance / air_time * 60, .before = 1)
flights %>% mutate(hour = air_time / 60, .after = air_time)
flights %>% mutate(hour = air_time / 60, .after = air_time)
flights %>% mutate(hour = air_time / 60, .after = air_time)
flights %>% summarise(mean = mean(air_time, na.rm = TRUE),           # 평균
std_dev = sd(air_time, na.rm = TRUE),          # 표준편차
n = n())
## 5.1.4 그룹 관련 함수
# summarie() 함수 : 통계량(평균, 최솟값, 최댓값 등)을 계산하여 하나의 행으로 요약
# 여러개의 다양한 요약 함수 사용 가능
# 매개변수 na.rm : 결측값(NA)이 존재할 때, 결측값을 제외하고 통계값 계산
# n() 함수 : 그룹별 크기 계산
flights %>% summarise(mean = mean(air_time, na.rm = TRUE),           # 평균
std_dev = sd(air_time, na.rm = TRUE),          # 표준편차
min = min(air_time, na.rm = TRUE),             # 최솟값
max = max(air_time, na.rm = TRUE),             # 최댓값
n = n())                                       # 값의 개수
flights %>% summarise(mean = mean(air_time),           # 평균
std_dev = sd(air_time),          # 표준편차
min = min(air_time),             # 최솟값
max = max(air_time),             # 최댓값
n = n())
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights %>% relocate(air_time, distance)
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights %>% relocate(air_time, distance)
# relocate() 함수 : 변수 위치 변경, 기본값은 첫번째 열
# mutate()와 같이 매개변수 .before와 .after를 이용하여 위치 지정
flights
flights %>% relocate(air_time, distance)
flights %>% relocate(air_time, distance)                    # air_time과 distance를 맨 앞쪽 열로 이동
flights %>% relocate(carrier:tailnum, .before = day)        # carrier ~ tailnum을 day변수 앞으로 이동
# group_by() 함수 : 특정 변수를 기준으로 그룹화
# 일반적으로 summarise()와 함께 사용
# 여러 변수를 기준으로 그룹화 가능
# summarize() 함수에서 매개변수 .groups
# "drop" : 모든 그룹의 수준을 푼다
# "keep" : 같은 그룹화 구조가 유지된다
# "drop_last" : 메세지를 없앤다
# ungroup() 함수 : 그룹화 제거
flights %>% group_by(month)
flights %>% group_by(month) %>%                       # 월별 평균 출발 지연 시간, 그룹 크기
summarise(delay = mean(dep_delay, na.rm = TRUE), n = n())
# 월별로 그룹을 나누고, 각 그룹의 평균 출발 지연시간과 그룹 크기를 계산
flights %>% group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE), n = n())
# group_by() 함수 : 특정 변수를 기준으로 그룹화
# 그룹별 통계량을 계산할 때 주로 사용
# 일반적으로 summarise()와 함께 사용
# 여러 변수를 기준으로 그룹화 가능
# summarize() 함수에서 매개변수 .groups
# "drop" : 모든 그룹의 수준을 푼다
# "keep" : 같은 그룹화 구조가 유지된다
# "drop_last" : 메세지를 없앤다
# ungroup() 함수 : 그룹화 제거
flights %>% group_by(month)           # group_by()만 적용하면 월별로 그룹을 나누었다는 사실만 알 수 있고, 별다른 변화는 없음
flights %>% group_by(year, month, day) %>% summarise(n = n())
flights %>% group_by(month) %>% ungroup() %>% summarise(n = n())     # 그룹화 제거
# [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수
library(tidyr)
table1
table2
table3
table4a
table4b
# wide format -> long format
# pivot_longer() 함수 사용
pivot_longer(colc = c(`1999`, `2000`))
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(colc = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# 하나의 행에 하나의 관측 대상 -> wide form
table4a # 반복이 열(변수) 이름으로 들어가면 wide format
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases")
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases") %>%
mutate(year = parse_integer(year))
# [예제] WHO에서 발표한 1999~2000년 3개 국가(아프가니스탄, 브라질, 중국)의 결핵 사례 수
library(tidyverse)
# wide format -> long format
# pivot_longer() 함수 사용
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "cases") %>%
mutate(year = parse_integer(year))
table4b %>%
pivot_longer(cols = -country,
names_to = "year",
values_to = "population") %>%
mutate(year = parse_integer(year))
# [예제2]
relig_income
# [예제2]
relig_income %>% glimpse()
relig_income
relig_income %>%
pivot_longer(cols = -religion,
names_to = "income",
values_to = "count")
relig_income %>%
pivot_longer(cols = -religion,
names_to = "income",
values_to = "count") %>%
view()
# [예제3]
bilboard %>% glimpse()
# [예제3]
billboard %>% glimpse()
billboard
bilboard %>%
pivot_longer(cols = select(starts_with(wk)),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard %>%
pivot_longer(cols = select(starts_with(wk)),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard %>%
pivot_longer(cols = starts_with(wk),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
billboard
billboard %>%
pivot_longer(cols = starts_with("wk"),    # select와 starts_with를 이용해 'wk'로 시작하는 열들을 선택
names_to = "week",
values_to = "rank")
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE)            # value에서 결측값을 모두 버림
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk"
values_to = "rank",
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE)            # value에서 결측값을 모두 버림
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",               # week 열의 값에서 wk를 제거
values_to = "rank",
values_drop_na = TRUE) %>%         # value에서 결측값을 모두 버림
mutate(week = parse_integer(year))
# pivot할 열을 지정하는 방법은 dplyr::select() 스타일 표기법 따름. starts_with를 이용해 'wk'로 시작하는 열들을 선택
billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",               # week 열의 값에서 wk를 제거
values_to = "rank",
values_drop_na = TRUE) %>%         # value에서 결측값을 모두 버림
mutate(week = parse_integer(week))
# long format -> wide format =====================================
table1
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year, # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population))
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year,                  # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population)) %>%
relocate(country, ends_with("1999"))
table2
table1
table2 %>%
pivot_wider(names_from = type,
values_from = count)
# long format -> wide format =====================================
table1 %>%
pivot_wider(names_from = year,                  # column으로 보내려는 행들을 선택해야 함 (변수 이름을 어디서 따올 지)
values_from = c(cases, population)) %>%
relocate(country, ends_with("1999"))
table1
table2 %>%
pivot_wider(names_from = type,
values_from = count)
table2
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / populayion * 100000)
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000)
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate))
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로?
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                  # type만 wide로 만들어주면 됨
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%     # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로
table2 %>%
pivot_wider(names_from = type,                        # type을 wide로
values_from = count) %>%
mutate(rate = cases / population * 100000)
# 응용해보기
table2 %>%
pivot_wider(names_from = type,                        # type을 wide로
values_from = count) %>%
mutate(rate = cases / population * 100000) %>%        # mutate() 함수로 새로운 열도 추가 가능
pivot_wider(names_from = year,
values_from = c(cases, population, rate)) # 한번 더 wide로
# [예제]
fish_encounters
fish_encounters %>%
pivot_wider(names_from = station,
values_from = seen,
values_fill = 0)
# seperate 함수
# 여러개의 변수가 하나의 열에 저장되어 있을 때, 이를 분리
table3
# unite() 함수
# 여러개의 열을 하나의 열로 결합
table5
table %>%
unite(col = new_year, century, year)
table %>% unite(col = new_year, century, year)
table %>% unite(col = new_year, century, year)
table5 %>% unite(col = new_year, century, year)
# unite() 함수
# 여러개의 열을 하나의 열로 결합
table5
table5 %>% unite(col = new_year, century, year)
# seprate 함수
# 여러개의 변수가 하나의 열에 저장되어 있을 때, 이를 분리
table3
table3 %>%
separate(col = rate,
into = c("cases", "population"))
## 5.2.3 결측값 처리
# 결측값은 알려지지 않은 값을 표시. 결측값은 파급된다 = 결측값을 이용해 연산 시 결과는 결측값임을 뜻함.
# is.na() 함수 : 결측값 확인
NA > 5
10 == NA
NA + 10
NA / 2
NA == NA
is.na(NA)
# 명시적 결측값 : NA로 표시된 값
# 암묵적 결측값 : 단순히 데이터에 존재하지 않는 값
# povot_longer() 함수의 매개변수 values_drop_na 를 이용해 명시적 결측값을 암묵적 결측값으로 전환 가능
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c(`2015`, `2016`),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
stocks %>%
pivot_wider(names_from = year, values_from = return)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(
cols = c(`2015`, `2016`),
names_to = "year",
values_to = "return",
values_drop_na = TRUE
)
is.na(NA)
table3 %>%
separate(col = rate,
into = c("cases", "population"))
